https://botchallenge.cloud.epam.com/codenjoy-balancer/rest/game/settings/get

<List>
<script type="text/javascript" class="__REQUESTLY__SCRIPT">(function(namespace) { window[namespace] = window[namespace] || {}; window[namespace].responseRules = {}; let open = XMLHttpRequest.prototype.open; XMLHttpRequest.prototype.open = function(method) { this.addEventListener('readystatechange', function() { if (this.readyState === 4 && window[namespace].responseRules.hasOwnProperty(this.responseURL)) { const responseRule = window[namespace].responseRules[this.responseURL]; const {response, id} = responseRule; const responseType = this.responseType; let customResponse; customResponse = response.type === 'code' ? responseRule.evaluator({ method, url: this.responseURL, requestHeaders: this.requestHeaders, requestData: this.requestData, responseType: this.responseType, response: this.response }) : response.value; Object.defineProperty(this, 'response', { get: function () { if (response.type === 'static' && responseType === 'json') { return JSON.parse(customResponse); } return customResponse; } }); if (responseType === '' || responseType === 'text') { Object.defineProperty(this, 'responseText', { get: function () { return customResponse; } }); } window.postMessage({ from: 'requestly', type: 'response_rule_applied', id }, window.location.href); } }, false); open.apply(this, arguments); }; let send = XMLHttpRequest.prototype.send; XMLHttpRequest.prototype.send = function(data) { this.requestData = data; send.apply(this, arguments); }; let setRequestHeader = XMLHttpRequest.prototype.setRequestHeader; XMLHttpRequest.prototype.setRequestHeader = function(header, value) { this.requestHeaders = this.requestHeaders || {}; this.requestHeaders[header] = value; setRequestHeader.apply(this, arguments); } })('__REQUESTLY__')</script>
<item>
<perksNumberOfBombRemoteControl>3</perksNumberOfBombRemoteControl>
<perksBombBlastRadiusIncreaseEffectTimeout>10</perksBombBlastRadiusIncreaseEffectTimeout>
<roundsEnabled>true</roundsEnabled>
<semifinalTimeout>900</semifinalTimeout>
<semifinalPercentage>true</semifinalPercentage>
<semifinalLimit>50</semifinalLimit>
<semifinalEnabled>false</semifinalEnabled>
<semifinalResetBoard>true</semifinalResetBoard>
<semifinalShuffleBoard>true</semifinalShuffleBoard>
<multiple>false</multiple>
<playersPerRoom>5</playersPerRoom>
<killWallScore>1</killWallScore>
<killMeatChopperScore>3</killMeatChopperScore>
<killOtherHeroScore>10</killOtherHeroScore>
<yourHeroesDeathPenalty>2</yourHeroesDeathPenalty>
<winRoundScore>15</winRoundScore>
<bombsCount>1</bombsCount>
<bombPower>3</bombPower>
<boardSize>23</boardSize>
<destoryWallCount>52</destoryWallCount>
<meetChoppersCount>5</meetChoppersCount>
<timePerRound>300</timePerRound>
<timeForWinner>1</timeForWinner>
<timeBeforeStartRound>5</timeBeforeStartRound>
<roundsPerMatch>1</roundsPerMatch>
<minTicksForWin>1</minTicksForWin>
<perksDropRatio>20</perksDropRatio>
<perksPickTimeout>5</perksPickTimeout>
<perksBombBlastRadiusIncrease>2</perksBombBlastRadiusIncrease>
<perksBombCountIncrease>3</perksBombCountIncrease>
<perksBombCountEffectTimeout>10</perksBombCountEffectTimeout>
<perksBombImmuneEffectTimeout>10</perksBombImmuneEffectTimeout>
</item>
</List>